<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.goodsShop.dao.MemberDao">
    <select id="midCheck" resultType="java.lang.Integer">
        select count(*) from member where mid = #{mid};
    </select>

    <select id="emailCheck" resultType="java.lang.Integer">
        select count(*) from member where email = #{email};
    </select>

    <select id="loginCheck" resultType="com.spring.goodsShop.vo.MemberVo">
        select * from member where mid = #{mid};
    </select>

    <select id="findMid" resultType="java.lang.String">
        select mid from member where email = #{email};
    </select>

    <select id="emailCheck2" resultType="java.lang.Integer">
        select count(*) from member where email = #{email};
    </select>

    <select id="emailPwdCheck" resultType="java.lang.Integer">
        select count(*) from member where email = #{email} and mid = #{mid};
    </select>

    <select id="getMember" resultType="com.spring.goodsShop.vo.MemberVo">
        select * from member;
    </select>

    <select id="getMember2" resultType="com.spring.goodsShop.vo.MemberVo">
        select * from member where mid = #{mid} and email = #{email};
    </select>

    <select id="getSubCategoriesByMainCategory" resultType="com.spring.goodsShop.vo.SubcategoryVo">
        select * from sub_category where main_category_id = #{mainCategory};
    </select>

    <select id="getMemberIdBymid" resultType="java.lang.Integer">
        select id from member where mid = #{mid};
    </select>

    <select id="getProductImgIdByImg1" resultType="java.lang.Integer">
        select id from product_img where img1 = #{img1};
    </select>

    <select id="findEmailByMid" resultType="java.lang.String">
        select email from member where mid = #{mid};
    </select>

    <select id="getProductIdsByMemberId" resultType="java.lang.Integer">
        select id from product where member_id = #{memberId};
    </select>

    <select id="getOrderVoByProductId" resultType="com.spring.goodsShop.vo.OrderVo">
        select * from productOrder where product_id = #{productId};
    </select>

    <select id="getOrderVoByMemberId" resultType="com.spring.goodsShop.vo.OrderVo">
        select id, product_id, design, amount, productName, price, order_date, orderStatus from productOrder where member_id = #{memberId};
    </select>

    <select id="getProductIdByProductOrderId" resultType="java.lang.Integer">
        select product_id from productOrder where id = #{productOrderId};
    </select>

    <select id="getOrderStatusByProductOrderId" resultType="java.lang.String">
        select orderStatus from productOrder where id = #{productOrderId};
    </select>

    <select id="getRefundMessageIdByMemberIdAndProductId" resultType="java.lang.Integer">
        select id from refundMessage where member_id = #{memberId} and product_id = #{productId};
    </select>

    <select id="getRefundMessageIdByProductOrderId" resultType="java.lang.Integer">
        select refundMessage_id from productOrder where id = #{productOrderId};
    </select>

    <select id="getRefundReasonByrefundMessageId" resultType="java.lang.String">
        select memo from refundMessage where id = #{refundMessageId};
    </select>

    <select id="getRefundRefuseMessageByRefundMessageId" resultType="java.lang.String">
        select memo from refundRefuseMessage where refundMessage_id = #{refundMessageId};
    </select>

    <select id="checkWishListExist" resultType="java.lang.Integer">
        select count(*) from wishList where member_id = #{memberId};
    </select>

    <select id="getWishListProductIds" resultType="java.lang.String">
        select productIds from wishList where member_id = #{memberId};
    </select>

    <resultMap id="ProductVoMap" type="com.spring.goodsShop.vo.ProductVo">
        <result property="id" column="id"/>
        <result property="sub_category_id" column="sub_category_id"/>
        <result property="product_name" column="product_name"/>
        <result property="product_img_id" column="product_img_id"/>
        <result property="price" column="price"/>
        <result property="img1" column="img1"/>
    </resultMap>

    <select id="getProductForWishList" resultMap="ProductVoMap">
        SELECT p.id, p.sub_category_id ,p.product_name, p.product_img_id, p.price, pi.img1 FROM product p
        JOIN product_img pi ON p.product_img_id = pi.id WHERE p.id = #{wishListProductId};
    </select>


    <!--  insert  -->
    <insert id="memberJoin">
        insert into member (id, mid, pwd, email, level) values (default, #{vo.mid}, #{vo.pwd}, #{vo.email}, default);
    </insert>

    <insert id="setProduct_img">
        insert into product_img (id, img1, img2, img3, img4, img5) values (default, #{imgVo.img1}, #{imgVo.img2}, #{imgVo.img3}, #{imgVo.img4}, #{imgVo.img5});
    </insert>

    <insert id="setProduct">
        insert into product (id, sub_category_id, brand, product_name, member_id, product_img_id, product_img_detail, price, stock, design)
            values (default, #{productVo.sub_category_id}, #{productVo.brand}, #{productVo.product_name}, #{productVo.member_id}, #{productVo.product_img_id}, #{productVo.product_img_detail}, #{productVo.price}, #{productVo.stock}, #{productVo.design});
    </insert>

    <insert id="setRefundMessage">
        insert into refundMessage (id, member_id, memo, refundDate, product_id)
            value (default, #{memberId}, #{refundTextarea}, default, #{productId});
    </insert>

    <insert id="setProductOrderRefundMsgId">
        insert into productOrder (refundMessage_id) value (#{refundMessageId});
    </insert>

    <insert id="setRefundRefuseMessage">
        insert into refundRefuseMessage (id, refundMessage_id, memo, refuseDate) value (default, #{refundMessageId}, #{refundRefuseTextarea}, default);
    </insert>

    <insert id="insertWishList">
        insert into wishList (id, member_id, productIds) value (default, #{memberId}, #{productIdJson});
    </insert>

    <insert id="insertReviewNoImg">
        INSERT INTO review (id, order_id, stars, content, write_date)
        VALUE (default, #{reviewProductOrderId}, #{starRatingValue}, #{reviewText}, default);
    </insert>

    <insert id="insertReviewYesImg">
        INSERT INTO review (id, order_id, stars, review_img ,content, write_date)
        VALUE (default, #{reviewProductOrderId}, #{starRatingValue}, #{saveFileName} ,#{reviewText}, default);
    </insert>


    <!--  update  -->
    <update id="setPwd">
        update member set pwd = #{pwd} where mid = #{mid};
    </update>

    <update id="setAccount_num">
        update member set account_num = #{account_num} where mid = #{mid};
    </update>

    <update id="updateLevel">
        update member set level = #{level};
    </update>

    <update id="pwdSet">
        update member set pwd = #{encodePwd} where mid = #{mid};
    </update>

    <update id="updateOrderStatusByProductOrderId">
        update productOrder set orderStatus = #{orderStatus} where id = #{productOrderId};
    </update>

    <update id="updateOrderStatusSwitchRefund">
        update productOrder set orderStatus = #{refundProcessingOrderStatusStr} where id = #{productOrderId};
    </update>

    <update id="updateOrderStatusSwitchRefundRefuse">
        update productOrder set orderStatus = #{refundRefuseOrderStatusStr} where id = #{productOrderId};
    </update>

    <update id="updateWishList">
        update wishList set productIds = #{productIdJson} where member_id = #{memberId};
    </update>

    <update id="updateMemberDiscountPoint50">
        UPDATE member set discount_point = discount_point + 50 WHERE id = #{memberId};
    </update>

    <update id="updateMemberDiscountPoint100">
        UPDATE member set discount_point = discount_point + 100 WHERE id = #{memberId};
    </update>



    <!--  delete  -->
    <delete id="memberDelete" parameterType="String">
        delete from member where mid = #{mid} and email = #{email};
    </delete>
</mapper>